//+build !guest

package main

import "fmt"

func main(){

	// call foreign functions via OpenFFI

    // Prints hello world.
    fmt.Println("Calling PythonFuncsOpenFFIHost.hello_world()")
    HelloWorld()  // -- calling hello_world
/*
    # 10/2
    print('Calling PythonFuncsOpenFFIHost.div(10, 2)')
    res = PythonFuncsOpenFFIHost.div(10, 2)  # -- calling div
    if res != 5.0:
    	print('10/2 expects 5.0. Returned: {}'.format(res))
    	exit(1)
    print('div(10,2)={}'.format(res))

    # 10.5/2 - should fail. parameters are expected to be integers.
    try:
    	print('Calling PythonFuncsOpenFFIHost.div(10.5, 2)')
    	PythonFuncsOpenFFIHost.div(10.5, 2)  # -- calling div
    except TypeError:
    	print('TypeError (as expected!) - div(10.5, 2) is illegal, Parameters should be integers as defined in the IDL (PythonFuncs.proto)')

    # 10/0 - should fail. division by 0.
    try:
    	print('Calling PythonFuncsOpenFFIHost.div(10, 0)')
    	PythonFuncsOpenFFIHost.div(10, 0)  # -- calling div
    except RuntimeError as err:
    	if 'ZeroDivisionError' in str(err):
    		print('ZeroDivisionError (as expected!) - div(10, 0) is illegal, cannot divide by zero')


    # concatenate strings
    print("Calling PythonFuncsOpenFFIHost.concat_strings(['A', 'B', 'C'])")
    concat = PythonFuncsOpenFFIHost.concat_strings(['A', 'B', 'C'])  # -- calling concat_strings
    if concat != 'A, B, C':
    	print("Expected 'A, B, C'. Returned: {}".format(concat))
    	exit(1)


    #=============================================

    # To use Complex types, we need to import the types generated by protobuf
    import PythonFuncs_pb2

    gdata = PythonFuncs_pb2.game_data()
    gdata.pawn_wins = 5
    gdata.boss_wins = 1
    gdata.player = 'Gordon Freeman'

    # calculates (pawn_wins + (boss_wins*5)) and returns complex type "game_score" defined in PythonFuncs_pb2
    print("Calling PythonFuncsOpenFFIHost.calculate_score(gdata)")
    gscore = PythonFuncsOpenFFIHost.calculate_score(gdata)  # -- calling calculate_score
    if gscore.player != 'Gordon Freeman' or gscore.score != 10:
    	print("Expected player to be 'Gordon Freeman' and score to be 10. Returned player: {}, score: {}".format(gscore.player, gscore.score))
    	exit(1)

    # generates score returns an array of game_score complex type AND the sum of their score
    print("Calling PythonFuncsOpenFFIHost.gen_scores()")
    gengscore, total_sum = PythonFuncsOpenFFIHost.gen_scores()  # -- calling gen_scores
    if len(gengscore) != 2:
    	print("Returned array size expected to be 2. Returned: {}".format(len(gengscore)))
    	exit(1)

    if gengscore[0].player != 'player1' or gengscore[0].score != 1:
    	print("Expected player 1 to be 'player1' and score to be 11. Returned player: {}, score: {}".format(gengscore[0].player, gengscore[0].score))
    	exit(1)

    if gengscore[1].player != 'player2' or gengscore[1].score != 5:
    	print("Expected player 1 to be 'player1' and score to be 11. Returned player: {}, score: {}".format(gengscore[1].player, gengscore[1].score))
    	exit(1)

    if total_sum != 6:
    	print("Total sum expected is 6. Returned : {}".format(total_sum))
    	exit(1)

*/

}