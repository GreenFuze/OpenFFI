//+build !guest

package main

import "fmt"
import "os"

func main(){

	// call foreign functions via OpenFFI

    // Prints hello world.
    fmt.Println("Calling HelloWorld()")
    HelloWorld()  // -- calling hello_world

    // 10/2
    fmt.Println("Calling PythonFuncsOpenFFIHost.div(10, 2)")
    res, err := Div(10, 2)  // -- calling div
    if res != 5.0{
    	fmt.Printf("10/2 expects 5.0. Returned: %v\n", res)
    	os.Exit(1)
    }

    fmt.Printf("div(10,2)=%v\n", res)

    // 10.5/2 - SHOULD NOT COMPILE. parameters are expected to be integers.
    /*
    fmt.Println("Div(10.5, 2)")
    _, err = Div(10.5, 2) // # -- calling div
    */

	// 10/0 - should fail. division by 0.
    fmt.Println("Calling Div(10, 0)")
    res, err = Div(10, 0)  // -- calling div
    if err == nil{
        fmt.Printf("Should have failed. div(10, 0) is illegal - %v\n", res)
        os.Exit(1)
    } else {
        fmt.Printf("Failed **as expected**! - div(10, 0) is illegal. %v\n", err)
    }


    // concatenate strings
    fmt.Println(`Calling ConcatStrings([]string{"A", "B", "C"})`)
    concat, err := ConcatStrings([]string{"A", "B", "C"})  // -- calling ConcatStrings
    if err != nil{
		fmt.Printf("ConcatStrings failed. Error: %v", err)
		os.Exit(1)
	}

    if concat != "A, B, C"{
    	fmt.Printf("Expected \"A, B, C\". Returned: %v", concat)
    	os.Exit(1)
    }


    //=============================================

    // To use Complex types, we need to import the types generated by protobuf
    gdata := &GameData{}
    gdata.PawnWins = 5
    gdata.BossWins = 1
    gdata.Player = "Gordon Freeman"

    // calculates (PawnWins + (BossWins*5)) and returns complex type "game_score" defined in PythonFuncs_pb2
    fmt.Println("Calling PythonFuncsOpenFFIHost.calculate_score(gdata)")
    gscore, err := CalculateScore(gdata)  // -- calling CalculateScore
	if err != nil{
		fmt.Printf("CalculateScore failed. Error: %v", err)
		os.Exit(1)
	}

    if gscore.Player != "Gordon Freeman" || gscore.Score != 10{
		fmt.Printf("Expected Player to be 'Gordon Freeman' and score to be 10. Returned Player: %v, score: %v", gscore.Player, gscore.Score)
		os.Exit(1)	
	}

	// generates score returns an array of GameScore complex type AND the sum of their score
    fmt.Println("Calling GenScores()")
    gengscore, total_sum, err := GenScores()  // -- calling GenScores
    if len(gengscore) != 2{
		fmt.Printf("Returned array size expected to be 2. Returned: %v\n", len(gengscore))
		os.Exit(1)
	}

    if gengscore[0].Player != "Player1" || gengscore[0].Score != 1 {
		fmt.Printf("Expected Player 1 to be \"Player1\" and score to be 11. Returned Player: %v, Score: %v\n", gengscore[0].Player, gengscore[0].Score)
		os.Exit(1)
	}

    if gengscore[1].Player != "Player2" || gengscore[1].Score != 5{
		fmt.Printf("Expected Player 1 to be \"Player1\" and score to be 11. Returned Player: %v, Score: %v\n", gengscore[1].Player, gengscore[1].Score)
		os.Exit(1)
	}

    if total_sum != 6{
		fmt.Printf("Total sum expected is 6. Returned : %v\n", total_sum)
		os.Exit(1)
	}

}