import GoFuncsOpenFFIHost

# call foreign functions via OpenFFI

# Prints hello world.
print('Calling GoFuncsOpenFFIHost.hello_world()')
GoFuncsOpenFFIHost.HelloWorld()  # -- calling hello_world

# 10/2
print('Calling GoFuncsOpenFFIHost.div(10, 2)')
res = GoFuncsOpenFFIHost.Div(10, 2)  # -- calling div
if res != 5.0:
	print('10/2 expects 5.0. Returned: {}'.format(res))
	exit(1)
print('div(10,2)={}'.format(res))

# 10.5/2 - should fail. parameters are expected to be integers.
try:
	print('Calling GoFuncsOpenFFIHost.div(10.5, 2)')
	GoFuncsOpenFFIHost.Div(10.5, 2)  # -- calling div
except TypeError:
	print('TypeError (as expected!) - div(10.5, 2) is illegal, Parameters should be integers as defined in the IDL (PythonFuncs.proto)')

# 10/0 - should fail. division by 0.
try:
	print('Calling GoFuncsOpenFFIHost.div(10, 0)')
	GoFuncsOpenFFIHost.Div(10, 0)  # -- calling div
except RuntimeError as err:
	if 'ZeroDivisionError' in str(err):
		print('ZeroDivisionError (as expected!) - div(10, 0) is illegal, cannot divide by zero')


# concatenate strings
print("Calling GoFuncsOpenFFIHost.concat_strings(['A', 'B', 'C'])")
concat = GoFuncsOpenFFIHost.ConcatStrings(['A', 'B', 'C'])  # -- calling concat_strings
if concat != 'A, B, C':
	print("Expected 'A, B, C'. Returned: {}".format(concat))
	exit(1)


#=============================================

# To use Complex types, we need to import the types generated by protobuf
import GoFuncs_pb2

gdata = GoFuncs_pb2.game_data()
gdata.pawn_wins = 5
gdata.boss_wins = 1
gdata.player = 'Gordon Freeman'

# calculates (pawn_wins + (boss_wins*5)) and returns complex type "game_score" defined in GoFuncs_pb2
print("Calling GoFuncsOpenFFIHost.calculate_score(gdata)")
gscore = GoFuncsOpenFFIHost.CalculateScore(gdata)  # -- calling calculate_score
if gscore.player != 'Gordon Freeman' or gscore.score != 10:
	print("Expected player to be 'Gordon Freeman' and score to be 10. Returned player: {}, score: {}".format(gscore.player, gscore.score))
	exit(1)

# generates score returns an array of game_score complex type AND the sum of their score
print("Calling GoFuncsOpenFFIHost.gen_scores()")
gengscore, total_sum = GoFuncsOpenFFIHost.GenScores()  # -- calling gen_scores
if len(gengscore) != 2:
	print("Returned array size expected to be 2. Returned: {}".format(len(gengscore)))
	exit(1)

if gengscore[0].player != 'Player1' or gengscore[0].score != 1:
	print("Expected player 1 to be 'Player1' and score to be 1. Returned player: {}, score: {}".format(gengscore[0].player, gengscore[0].score))
	exit(1)

if gengscore[1].player != 'Player2' or gengscore[1].score != 5:
	print("Expected player 1 to be 'Player2' and score to be 5. Returned player: {}, score: {}".format(gengscore[1].player, gengscore[1].score))
	exit(1)

if total_sum != 6:
	print("Total sum expected is 6. Returned : {}".format(total_sum))
	exit(1)

