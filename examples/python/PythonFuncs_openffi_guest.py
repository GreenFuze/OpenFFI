
# Code generated by OpenFFI. DO NOT EDIT.
# Guest code for PythonFuncs.proto

from PythonFuncs_pb2 import *
import traceback
import sys
from typing import Tuple


# Code to call foreign functions in module PythonicUtils
import PythonicUtils



# Call to foreign hello_world
def Foreignhello_world(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = Void()
		req.ParseFromString(paramsVal)
		
		PythonicUtils.hello_world()

		ret = Void()

		

		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)



# Call to foreign div
def Foreigndiv(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = div_params()
		req.ParseFromString(paramsVal)
		
		z = PythonicUtils.div( req.x, req.y)

		ret = div_return()

		
		if getattr(ret.z, 'extend', None) != None: # if repeated value, use append
			ret.z.extend(z)
		elif getattr(ret.z, 'CopyFrom', None) != None: # if proto message
			ret.z.CopyFrom(z)
		else:
			ret.z = z
		

		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)



# Call to foreign concat_strings
def Foreignconcat_strings(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = concat_strings_params()
		req.ParseFromString(paramsVal)
		
		result = PythonicUtils.concat_strings( req.arr_of_strings)

		ret = concat_strings_return()

		
		if getattr(ret.result, 'extend', None) != None: # if repeated value, use append
			ret.result.extend(result)
		elif getattr(ret.result, 'CopyFrom', None) != None: # if proto message
			ret.result.CopyFrom(result)
		else:
			ret.result = result
		

		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)




# Code to call foreign functions in module ComplexTypes
import ComplexTypes



# Call to foreign calculate_score
def Foreigncalculate_score(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = calculate_score_params()
		req.ParseFromString(paramsVal)
		
		gscore = ComplexTypes.calculate_score( req.gdata)

		ret = calculate_score_return()

		
		if getattr(ret.gscore, 'extend', None) != None: # if repeated value, use append
			ret.gscore.extend(gscore)
		elif getattr(ret.gscore, 'CopyFrom', None) != None: # if proto message
			ret.gscore.CopyFrom(gscore)
		else:
			ret.gscore = gscore
		

		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)



# Call to foreign gen_scores
def Foreigngen_scores(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = Void()
		req.ParseFromString(paramsVal)
		
		scores,total_score = ComplexTypes.gen_scores()

		ret = gen_scores_return()

		
		if getattr(ret.scores, 'extend', None) != None: # if repeated value, use append
			ret.scores.extend(scores)
		elif getattr(ret.scores, 'CopyFrom', None) != None: # if proto message
			ret.scores.CopyFrom(scores)
		else:
			ret.scores = scores
		
		if getattr(ret.total_score, 'extend', None) != None: # if repeated value, use append
			ret.total_score.extend(total_score)
		elif getattr(ret.total_score, 'CopyFrom', None) != None: # if proto message
			ret.total_score.CopyFrom(total_score)
		else:
			ret.total_score = total_score
		

		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)




