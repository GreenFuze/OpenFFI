package main

import (
	"fmt"
	"strings"
	"text/template"
)

const GuestTemplate = `
# Code generated by OpenFFI. DO NOT EDIT.
# Guest code for {{.ProtoIDLFilename}}

from {{.ProtobufFilename}} import *
import traceback
import sys
from typing import Tuple

{{range $mindex, $m := .Modules}}
# Code to call foreign functions in module {{$m.Name}}
import {{$m.Name}}

{{range $findex, $f := $m.Functions}}

# Call to foreign {{.ForeignFunctionName}}
def Foreign{{$f.ForeignFunctionName}}(paramsVal: bytes) -> Tuple[bytes,str]:
	try:
		req = {{$f.ProtobufRequestStruct}}()
		req.ParseFromString(paramsVal	)
	
		ret = {{$f.ProtobufResponseStruct}}()
		{{range $index, $elem := $f.ExpandedReturn}}{{if $index}},{{end}}ret.{{$elem}}{{end}} = {{$m.Name}}.{{$f.ForeignFunctionName}}({{range $index, $elem := $f.ExpandedParameters}}{{if $index}},{{end}} req.{{$elem}}{{end}})
	
		return ret.SerializeToString(), None

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return None, '\n'.join(errdata)

{{end}}

{{end}}
`

//--------------------------------------------------------------------
type GuestTemplateParameters struct {
	ProtoIDLFilename       string
	ProtobufFilename       string

	Modules []*GuestTemplateModuleParameters
}
//--------------------------------------------------------------------
type GuestTemplateModuleParameters struct {
	Name string
	Functions []*GuestTemplateFunctionParameters
}
//--------------------------------------------------------------------
type GuestTemplateFunctionParameters struct {
	ForeignFunctionName    string
	ProtobufRequestStruct  string
	ProtobufResponseStruct string
	ExpandedParameters     []string
	ExpandedReturn         []string
}
//--------------------------------------------------------------------
func NewGuestTemplateParameters(protoIDLFilename string) (*GuestTemplateParameters, error){

	extensionIndex := strings.LastIndex(protoIDLFilename, ".")
	if extensionIndex == -1{
		return nil, fmt.Errorf("Cannot find extension in proto filename: %v", protoIDLFilename)
	}

	protoFilenameWithoutExtension := protoIDLFilename[:extensionIndex]

	gtp := &GuestTemplateParameters{
		ProtoIDLFilename: protoIDLFilename,
		ProtobufFilename: protoFilenameWithoutExtension + PROTOBUF_PYTHON_SUFFIX,
	}

	gtp.Modules = make([]*GuestTemplateModuleParameters, 0)

	return gtp, nil
}
//--------------------------------------------------------------------
func (this *GuestTemplateParameters) AddModule(m *Module){

	// add modules
	modParams := &GuestTemplateModuleParameters{
		Name:      m.Name,
		Functions: make([]*GuestTemplateFunctionParameters, 0),
	}

	// for each module, add the function

	for _, f := range m.Functions{

		funcParams := &GuestTemplateFunctionParameters{
			ForeignFunctionName: f.Name,
			ProtobufRequestStruct: f.RequestName,
			ProtobufResponseStruct: f.ResponseName,
			ExpandedParameters: make([]string, 0),
			ExpandedReturn: make([]string, 0),
		}

		// generate parameters
		for _, p := range f.Parameters{
			funcParams.ExpandedParameters = append(funcParams.ExpandedParameters, p.Name)
		}

		for _, r := range f.Return{
			funcParams.ExpandedReturn = append(funcParams.ExpandedReturn, r.Name)
		}

		modParams.Functions = append(modParams.Functions, funcParams)
	}

	this.Modules = append(this.Modules, modParams)
}
//--------------------------------------------------------------------
func (this *GuestTemplateParameters) Generate() (string, error){

	if this.ProtoIDLFilename == ""{
		return "", fmt.Errorf("ProtoIDLFilename is empty")
	}

	if this.ProtobufFilename == ""{
		return "", fmt.Errorf("ProtobufFilename is empty")
	}

	if this.Modules == nil || len(this.Modules) == 0{
		return "", fmt.Errorf("No functions defined")
	}

	for _, m := range this.Modules {

		if m.Name == ""{
			return "", fmt.Errorf("Module name is empty")
		}

		for _, f := range m.Functions {
			if f.ForeignFunctionName == "" {
				return "", fmt.Errorf("ForeignFunctionName is empty")
			}

			if f.ProtobufRequestStruct == "" {
				return "", fmt.Errorf("ProtobufRequestStruct is empty")
			}

			if f.ProtobufResponseStruct == "" {
				return "", fmt.Errorf("ProtobufResponseStruct is empty")
			}

			if f.ExpandedParameters == nil {
				return "", fmt.Errorf("ExpandedParameters is nil")
			}

			if f.ExpandedParameters == nil {
				return "", fmt.Errorf("ExpandedParameters is nil")
			}
		}
	}


	temp, err := template.New("Guest").Parse(GuestTemplate)
	if err != nil{
		return "", fmt.Errorf("Failed to parse GuestTemplate, err: %v", err)
	}

	strbuf := strings.Builder{}

	err = temp.Execute(&strbuf, this)
	if err != nil{
		return "", fmt.Errorf("Failed to execute guest template, err: %v", err)
	}

	return strbuf.String(), nil
}
//--------------------------------------------------------------------
//--------------------------------------------------------------------
//--------------------------------------------------------------------
func NewGuestTemplateFunctionParameters(foreignFunctionName string, protobufRequestStruct string, protobufResponseStruct string) *GuestTemplateFunctionParameters{
	return &GuestTemplateFunctionParameters{
		ForeignFunctionName:    foreignFunctionName,
		ProtobufRequestStruct:  protobufRequestStruct,
		ProtobufResponseStruct: protobufResponseStruct,
	}
}
//--------------------------------------------------------------------
func (this *GuestTemplateFunctionParameters) AddParameters(parameters ...string){
	this.ExpandedParameters = append(this.ExpandedParameters, parameters...)
}
//--------------------------------------------------------------------
func (this *GuestTemplateFunctionParameters) AddReturnParameters(parameters ...string){
	this.ExpandedReturn = append(this.ExpandedReturn, parameters...)
}
//--------------------------------------------------------------------