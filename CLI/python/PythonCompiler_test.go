package main

import (
	"testing"
)

//--------------------------------------------------------------------
func TestGuestTemplate(t *testing.T){

	guestCompiler := GuestTemplateGenerator{
		ProtoIDLFilename: "test.proto",
		ProtobufFilename: "prototest_pb.py",
		ForeignFunctionFilename: "foreignfuncfile.py",
		ForeignFunctionName: "foreignfunc",
		ProtobufRequestStruct: "foreignfuncParams",
		ProtobufResponseStruct: "foreignfuncResponse",
		ExpandedParameters: []string{"p1", "p2"},
		ExpandedReturn: []string{"r1", "r2"},
	}

	expected := `
# Code generated by OpenFFI. DO NOT EDIT.
# Guest code for test.proto

from prototest_pb.py import *
from foreignfuncfile.py import foreignfunc as Foreignforeignfunc

# Call to foreign foreignfunc
def foreignfunc(paramsVal: bytes) -> ReturnVal:
	
	# TODO: try/catch?

	req = foreignfuncParams()
	req.ParseFromString(str(paramsVal))

	ret = foreignfuncResponse()

	# python method to call a function without knowing its parameter names?

	 res.r1, res.r2 = foreignfuncfile.py.Foreignforeignfunc( req.p1 , req.p2 )

	return bytes(ret.SerializeToString(), 'utf-8')
`

	guestCode, err := guestCompiler.Generate()
	if err != nil{
		t.Fatalf("Failed to generate guest code: %v", err)
	}

	if guestCode != expected{
		t.Fatalf("Generated code is different than expected.\n\nGenerated: \"%v\"\n\nExpected \"%v\"", guestCode, expected)
	}
}
//--------------------------------------------------------------------
